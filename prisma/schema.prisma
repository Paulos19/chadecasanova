// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum para os papéis de usuário
enum Role {
  USER
  ADMIN
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  hashedPassword String? // Usaremos para login com email/senha
  role          Role      @default(USER) // Papel do usuário
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relacionamentos do Next-Auth
  accounts Account[]
  sessions Session[]
  
  // Relacionamento com os presentes dados
  gifts Gift[]
}

// Model de Produto (o que o Admin deseja)
model Product {
  id              String   @id @default(cuid())
  name            String
  description     String?
  imageUrl        String   // URL da imagem no Vercel Blob
  desiredQuantity Int      // Quantidade desejada (Ex: 4 cadeiras)
  currentQuantity Int      @default(0) // Quantidade já recebida
  
  // Campo para controlar se o item ainda pode ser comprado
  // Podemos controlar isso na lógica (current >= desired), 
  // mas um campo 'enabled' pode ser útil para o Admin desabilitar manualmente.
  // Por enquanto, vamos manter simples e calcular na hora.

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamento com os presentes recebidos
  gifts Gift[]
}

// Model de Presente (Registro de quem deu o quê)
// Isso garante o anonimato na UI, mas o registro no DB
model Gift {
  id        String   @id @default(cuid())
  giftedAt  DateTime @default(now())

  // Relacionamento com o Usuário (quem deu)
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Relacionamento com o Produto (o que foi dado)
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}


// --- MODELS OBRIGATÓRIOS DO NEXT-AUTH ---

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}